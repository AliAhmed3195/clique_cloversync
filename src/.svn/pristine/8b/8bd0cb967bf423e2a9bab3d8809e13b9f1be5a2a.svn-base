(function() {
    'use strict';
    angular
        .module('transactions')
        .controller('TransactionController', Controller);
        //.directive('connectToQuickbooks', connectToQuickbooks);

    /* @ngInject */
    function Controller($window,printer,$http,$compile,$rootScope,$filter,$scope, $timeout, $q,$mdDialog,TransactionModel,Clique,$mdSidenav,$log,$state,triBreadcrumbsService,SettingModel,CliqueConstant,helper,VantivTriPOSiPP350) {
        
        
        //remove invoice search
        sessionStorage.removeItem("invoice_search");

        
        var vm = this;
        $rootScope.transactionResponse={id:1,name:'Faisal'};
        var supportVoidRefund=false;
        vm.isTransactionLoaded=true;
        vm.tblData = [];
        $scope.processorType;
        $scope.hardwareSupport={
            triposipp350:true
        };
        var x2js = new X2JS();
        //vantiv tripos
        $scope.laneId;
        $scope.triPOSLaneInfo="";
        $rootScope.parentTransType="";
 
        vm.disabledVoidOption=function(item){
             //debugger;   
            switch(item.trans_type){
                case "triposipp350_debit":
                    return true;
                break;
                case "triposipp350_gift":
                    return true;
                break;
                default:
                    if(item.trans_amount!=item.remain_amount || item.trans_amount <= 0 ){
                        return true;
                    }else{
                        return false;
                    }
                break;
            }
            return true;
        }
        vm.showRefundOption=function(transType){
            return true;
        }
        $scope.promise = SettingModel.GetPaymentInfo();
        $scope.promise.then(function(response){
            if(response.statuscode==0){
                
                ///Get Settings/////
                $scope.promise = SettingModel.GetCompanyInfo();
                $scope.promise.then(function(response){
                    if(response.statuscode==0){
                        $rootScope.companyInfo=response.data;

                    }
                });

                $scope.paymentInfo=response.data;
                if(response.data.total_count > 0){
                    angular.forEach(response.data.items, function(value, key){
                        var is_default=value.is_default;
                        var voidrefund=value.voidrefund;

                        if(is_default==true){

                                
                                if(helper.checkHardwareModel(value,'triposipp350')==true){
                                    console.log("--triposipp350--found");
                                    $scope.hardwareSupport.triposipp350=true;
                                    VantivTriPOSiPP350.config.serviceAddress=value.configuration.hardware.triposipp350.service_address;
                                    VantivTriPOSiPP350.config.tpAuthorizationCredential=value.configuration.hardware.triposipp350.developer_key;
                                    VantivTriPOSiPP350.config.tpAuthorizationSecret=value.configuration.hardware.triposipp350.developer_secret;
                                   
                                   if($scope.laneId==null || $scope.laneId==undefined){
                                         //Get Lane Information
                                        
                                
                                    /*VantivTriPOSiPP350.paymentAccount(VantivTriPOSiPP350.config,function(res){
                                          
                                          var response=res.data;
                                          $scope.triPOSLaneInfo=response;
                                          $scope.triPOSLaneInfo._hasErrors;
                                          if($scope.triPOSLaneInfo._hasErrors==true){
                                            $scope.triPOSLaneInfo.errorMessage=response._errors[0].developerMessage;
                                          }else{
                                            $scope.laneId=parseInt($scope.triPOSLaneInfo.ipLanes[0].laneId);
                                          }
                                        });*/
                                        VantivTriPOSiPP350.getLaneInfo(VantivTriPOSiPP350.config,function(res){
                                          var response=res.data;
                                          $scope.triPOSLaneInfo=response;
                                          $scope.triPOSLaneInfo._hasErrors;
                                          if($scope.triPOSLaneInfo._hasErrors==true){
                                            $scope.triPOSLaneInfo.errorMessage=response._errors[0].developerMessage;
                                          }else{
                                            $scope.laneId=parseInt($scope.triPOSLaneInfo.ipLanes[0].laneId);
                                          }
                                        });
                                    } 

                                }   
                            if(voidrefund==true){
                                //
                                supportVoidRefund=true;
                                vm.tblAction=[
                                        {name:'Void',icon:'fa fa-plus',method:'call-void',class:"md-warn md-raised md-small"},
                                        {name:'Refund',icon:'fa fa-minus',method:'call-refund',class:"md-primary md-raised md-small"}
                                    ];
                                
                                    $rootScope.$on("call-void", function(event,params){
                                       callVoid(params);
                                    });
                                    $rootScope.$on("call-refund", function(event,params){
                                       callRefund(params);
                                    });

                                    
                            }
                        } ///
                    });
                }
            }
        });
        $scope.sendReceiptDialog = function() {
            $mdDialog.show({
                controller: ReceiptController,
                templateUrl: 'app/modules/invoice/detail/sendConfirmationDialog.html',
                parent: angular.element(document.body),
                scope: $scope.$new(),
                //targetEvent: ev,
                clickOutsideToClose: true
            })
            .then(function(answer) {

            }, function() {

            });
        };
        $scope.emailReceipt=function(transData,transType){
                
             $scope.settings = {
                InvoiceContacts: {
                    sender_email: '',
                    sender_name: '',
                    cc_email: [],
                    bcc_email: [],
                    to_email: [],
                    save_email_erp: false,
                },
                subject: '',
                template_id: '',
                title:"Send Reciept"
            };
            
            var receipt_type="normal";
            var isTriposipp350 = transType.search("triposipp350");    
            if(isTriposipp350==0){
              receipt_type="triposipp350";
            }


            var customer_email=transData.customer_email;
            $scope.promise = SettingModel.GetSettings();
            $scope.promise.then(function(response) {
                if (response.statuscode == 0) {
                    $scope.settings = response.data;
                    console.log($scope.settings)
                    $scope.settings.title="Send Receipt";
                    $scope.settings.transaction=transData;
                    $scope.settings.companyInfo=$rootScope.companyInfo.company;
                    $scope.settings.receipt_type=receipt_type;

                    $scope.settings.InvoiceContacts.to_email = [];
                    if (customer_email != "") {
                        $scope.settings.InvoiceContacts.to_email.push(customer_email);
                    } 
                    $scope.sendReceiptDialog();    
                } 
            });
   
        };
        $scope.callVoid=function(transData,transType){
            //console.log("i am call void");
            $rootScope.transData=transData;
            $rootScope.parentTransType=transType;
            $mdDialog.show({
                  controller: DialogController,
                  templateUrl: 'app/modules/transactions/transaction.void.tmpl.html',
                  parent: angular.element(document.body),
                  targetEvent: null,
                  clickOutsideToClose:true,
                  fullscreen: true,
                  scope:$scope,
                  preserveScope: true
                })
                .then(function(answer) {
                }, function() {
                });   
        }
        $scope.callRefund=function(transData,transType){
            $rootScope.transData=transData;
            $rootScope.parentTransType=transType;
            $mdDialog.show({
                  controller: DialogController,
                  templateUrl: 'app/modules/transactions/transaction.refund.tmpl.html',
                  parent: angular.element(document.body),
                  targetEvent: null,
                  clickOutsideToClose:true,
                  fullscreen: true,
                  scope:$scope,
                  preserveScope: true
                })
                .then(function(answer) {
                }, function() {
                });
        }
        $scope.printReceipt=function(transData,transType){
           
            $rootScope.parentTransType=transType;
            //debugger;
            $rootScope.transactionResponse=transData;
            callPrintReceipt();
        }
        function callPrintReceipt(){
            
           console.log($rootScope.parentTransType);
            var receipt_template="transaction.print.html";
            var isTriposipp350 = ($rootScope.transactionResponse.trans_type).search("triposipp350");    
            if(isTriposipp350==0){
                var transData=$rootScope.transactionResponse;
                receipt_template="transaction.triposipp350.print.html";
            }
            else if($rootScope.parentTransType!=undefined){
                if(($rootScope.parentTransType).search("triposipp350")==0)
                {
                    receipt_template="transaction.triposipp350.print.html";
                }
            }
            $mdDialog.show({
                  controller: DialogController,
                  templateUrl: 'assets/'+receipt_template,
                  parent: angular.element(document.body),
                  targetEvent: null,
                  clickOutsideToClose:true,
                  fullscreen: true
                })
                .then(function(answer) {
                }, function() {
                });   
        }

        function DialogController($window,$scope, $mdDialog) {

            $scope.transData=$rootScope.transData;
            $scope.companyInfo=$rootScope.companyInfo;
            $scope.hideDialogActions=false;
            $scope.hideEmailReceiptButton=true;
            $scope.transactionResponse=$rootScope.transactionResponse;
            $scope.refund_amount=0.0;

            
             $scope.confirm = function(task) {
                  

                var transType = $scope.transData.trans_type;
                var expr = /triposipp350/;
                   console.log() 


                if (task == 'void') {
                    console.log("---Void Action----");
                    console.log(transType.match(expr));
                    console.log($scope.hardwareSupport.triposipp350);

                    if (transType.match(expr) && $scope.hardwareSupport.triposipp350) {
                        $scope.processTriPosVoid($scope.transData, task);
                    }else{
                        $scope.processRefundAndVoid(task);
                    }
                } else if (task == 'refund') {

                    var title = (task == 'refund' ? 'Are you sure you want to refund?' : 'Are you sure you want to void this payment?');
                    var confirm = $mdDialog.confirm()
                        .title(title)
                        .textContent('')
                        .ariaLabel('Confirmation')
                        //.targetEvent(ev)
                        .ok('Confirm')
                        .cancel('Cancel');

                    $mdDialog.show(confirm).then(function() {

                        if (transType.match(expr) && $scope.hardwareSupport.triposipp350) {
                            $scope.processTriPosRefund($scope.transData, task);
                        }else{
                            
                            $scope.processRefundAndVoid(task);
                        }
                        //$scope.processRefundAndVoid(task);
                    }, function() {

                    });
                }

            };

            
            
            $scope.processTriPosVoid=function(transData,task){
                 $scope.showProgress=true;  
                 $scope.hideDialogActions=true; 
                 var trans_id=transData.ref_id;
                 var trans_type=(transData.trans_type).split('_');
                 var url=VantivTriPOSiPP350.config.serviceAddress+'api/v1/void/'+trans_id;   
                 var params={laneId:$scope.laneId};
                
                VantivTriPOSiPP350.processVoidRefund
                    (
                   url,
                   params,
                   VantivTriPOSiPP350.config,
                   function(res){
                        $scope.showProgress=false;  
                        $scope.hideDialogActions=false; 
                        var response=res.data;
                        var triPOSResponse=response;
                        if(triPOSResponse._hasErrors==true){
                          var error_message=response._errors[0].developerMessage;
                          Clique.showToast(error_message,'bottom right','error');
                          $mdDialog.hide();
                        }
                        else{
                           
                            var transStatus="";
                            var reason="";
                            if(triPOSResponse.isApproved==true){
                                transStatus="approved";
                            }
                            else
                            {
                                transStatus="declined";
                                reason=triPOSResponse._processor.processorResponseMessage;
                            }
                           
                            var RawResponse="";
                            var ResponseCode="";
                            var  processorRawResponse="";
                            var xml2json=x2js.xml_str2json(triPOSResponse._processor.processorRawResponse);  
                            RawResponse=xml2json.CreditCardVoidResponse.Response;
                            if(transStatus=='approved'){
                                ResponseCode=triPOSResponse._processor.hostResponseCode+"/"+triPOSResponse._processor.hostResponseMessage;     
                            }else{
                                ResponseCode=triPOSResponse._processor.expressResponseCode+"/"+triPOSResponse._processor.expressResponseMessage;     
                            }
                            var ProcessorInfo="";
                                ProcessorInfo={
                                  processorRawResponse:{
                                    RawResponse:RawResponse,
                                    MerchantId:triPOSResponse.merchantId,
                                    TerminalId:triPOSResponse.terminalId,
                                    ApprovalNumber:triPOSResponse.approvalNumber,
                                    paymentType:'Void',
                                    ResponseCode:ResponseCode,
                                  },
                                  transactionId:triPOSResponse.transactionId,
                                  TransStatus:transStatus,
                                  StatusMessage:reason
                                }
                            $scope.transData.ProcessorInfo=ProcessorInfo;
                            $scope.transData.status=transStatus;
                            $scope.transData.statusmessage=reason;
                            $scope.transData.authcode=ResponseCode;
                            $scope.transData.payment_data="";
                            $scope.processRefundAndVoid(task);

                        }
                  });
            }
            $scope.processTriPosRefund=function(transData,task){
                 $scope.showProgress=true;  
                 $scope.hideDialogActions=true; 
                 var trans_id=transData.ref_id;
                 var trans_type=(transData.trans_type).split('_');
                 var url=VantivTriPOSiPP350.config.serviceAddress+'api/v1/reversal/'+trans_id+'/'+trans_type[1];  
                 var refund_amount=parseFloat($scope.refund_amount); 
                 var params={
                        laneId:$scope.laneId,
                        transactionAmount:refund_amount
                    };

                VantivTriPOSiPP350.processVoidRefund
                    (
                   url,
                   params,
                   VantivTriPOSiPP350.config,
                   function(res){
                        $scope.showProgress=false;  
                        $scope.hideDialogActions=false; 
                 
                        var response=res.data;
                        var triPOSResponse=response;
                        if(triPOSResponse._hasErrors==true){
                          var error_message=response._errors[0].developerMessage;
                          Clique.showToast(error_message,'bottom right','error');
                          $mdDialog.hide();
                        }
                        else{
                            debugger;
                            var transStatus="";
                            var reason="";
                            if(triPOSResponse.isApproved==true){
                                transStatus="approved";
                            }
                            else
                            {
                                transStatus="declined";
                                reason=triPOSResponse._processor.processorResponseMessage;
                            }
                             


                            var RawResponse="";
                            var ResponseCode="";
                            var processorRawResponse="";
                            var payment_type=""
                            var xml2json=x2js.xml_str2json(triPOSResponse._processor.processorRawResponse);  
                            payment_type=(triPOSResponse.paymentType).toLowerCase();
                            //RawResponse=xml2json.CreditCardReversalResponse.Response;
                            if(payment_type=='credit'){
                                RawResponse=xml2json.CreditCardReversalResponse.Response;
                            }else if(payment_type=='debit'){
                                RawResponse=xml2json.DebitCardReversalResponse.Response;
                            }else if(payment_type=='gift'){
                                RawResponse=xml2json.GiftCardReversalResponse.Response;
                            }
                            if(transStatus=='approved'){
                                ResponseCode=triPOSResponse._processor.hostResponseCode+"/"+triPOSResponse._processor.hostResponseMessage;     
                            }else{
                                ResponseCode=triPOSResponse._processor.expressResponseCode+"/"+triPOSResponse._processor.expressResponseMessage;     
                            }
                            
                            var ProcessorInfo="";
                                ProcessorInfo={
                                  processorRawResponse:{
                                    RawResponse:RawResponse,
                                    MerchantId:triPOSResponse.merchantId,
                                    TerminalId:triPOSResponse.terminalId,
                                    ApprovalNumber:triPOSResponse.approvalNumber,
                                    paymentType:'Refund',
                                    ResponseCode:ResponseCode,
                                  },
                                  transactionId:triPOSResponse.transactionId,
                                  TransStatus:transStatus,
                                  StatusMessage:reason
                                }
                            $scope.transData.ProcessorInfo=ProcessorInfo;
                            $scope.transData.status=transStatus;
                            $scope.transData.statusmessage=reason;
                            $scope.transData.authcode=ResponseCode;
                            $scope.transData.payment_data="";
                            
                            $scope.processRefundAndVoid(task);

                        }
                  });
            
            }

            $scope.processRefundAndVoid = function(task) {
                
                    $scope.showProgress=true;
                    $scope.hideDialogActions=true;
                   
                    
                   if(task=='refund'){
                        var postData=$scope.transData;

                        postData.refund_amount=$scope.refund_amount;
                        postData.action='refund';
                        postData.type=postData.process_type;
                        
                        vm.promise = TransactionModel.DoRefundTransaction(postData);
                        vm.promise.then(function(response){
                            if(response.statuscode==0){
                                Clique.showToast(response.statusmessage,'bottom right','success');
                                $rootScope.transactionResponse=response.data;
                                getTransaction();
                                callPrintReceipt();
                            }
                            else{
                                Clique.showToast(response.statusmessage,'bottom right','error');
                            }

                            $mdDialog.hide();
                            
                            $scope.showProgress=false;
                        });
                    }
                    if(task=='void'){
                        
                        var postData=$scope.transData;
                        postData.action='void';
                        postData.type=postData.process_type;
                        vm.promise = TransactionModel.DoVoidTransaction(postData);
                        vm.promise.then(function(response){
                        if(response.statuscode==0){
                             Clique.showToast(response.statusmessage,'bottom right','success');
                             $rootScope.transactionResponse=response.data;
                             getTransaction();
                             callPrintReceipt();
                       
                        }
                        else{
                            Clique.showToast(response.statusmessage,'bottom right','error');
                        }
                         
                         $mdDialog.hide();
                         $scope.showProgress=false;    
                        });
                    }
            };

            $scope.cancel = function() {
              $mdDialog.cancel();
            };
            
            $scope.print = function() {
                console.log("parent type");
                console.log($rootScope.parentTransType);
                var receipt_template="transaction.print.html";
                var isTriposipp350 = ($scope.transactionResponse.trans_type).search("triposipp350");    
                if(isTriposipp350==0){
                    receipt_template="transaction.triposipp350.print.html";
                }else if($rootScope.parentTransType!=undefined){
                    if($rootScope.parentTransType.search("triposipp350")==0){
                        receipt_template="transaction.triposipp350.print.html";
                    }
                }
         
                printer.print('assets/'+receipt_template, {transactionResponse:$scope.transactionResponse,companyInfo:$rootScope.companyInfo});
             
        
            };
        }
        vm.selected = [];
        vm.filter = {
            options: {
                debounce: 500
            }
        };
        vm.query = {
            order: '-trans_timestamp',
            limit: 20,
            page: 1
        };

        //set Date/////
        var date = new Date();
        var y = date.getFullYear();
        var m = date.getMonth();
        
        var saveTransactionSearch = sessionStorage.getItem("transaction_search");
        if (saveTransactionSearch != null) {

            saveTransactionSearch = JSON.parse(saveTransactionSearch);
            if (saveTransactionSearch.customerSelectedItem != null) {
                if (Object.keys(saveTransactionSearch.customerSelectedItem).length > 0) {
                    vm.selectedItem = saveTransactionSearch.customerSelectedItem;
                }
            }
            vm.query = saveTransactionSearch;
        }

        $scope.from = (vm.query.from != undefined ? new Date(vm.query.from) : new Date(y, m, 1));
        $scope.to = vm.query.to != undefined ? new Date(vm.query.to) : new Date(y, m + 1, 0);



        vm.getTransaction = getTransaction;
        vm.removeFilter = removeFilter;
        vm.openSidebar=openSidebar;
        activate();
        ////////////////
       
        function openSidebar(navID) {
            
             $mdSidenav(navID)
                  .toggle()
                  .then(function () {
                    $log.debug("toggle " + navID + " is done");
                  });
        }
        $scope.resetForm = function() {
              var date = new Date(), y = date.getFullYear(), m = date.getMonth();
                vm.query = {
                    status: '',
                    order: '-trans_timestamp',
                    customer: '',
                    limit: 20,
                    page: 1
                } 
                $scope.from = new Date(y, m, 1);
                $scope.to = new Date(y, m + 1, 0)
                sessionStorage.setItem("transaction_search", "{}");

            }
        function activate() {
            var bookmark;
            $scope.$watch('vm.query.filter', function (newValue, oldValue) {
                //console.log('watching');
                if(!oldValue) {
                    bookmark = vm.query.page;
                }

                if(newValue !== oldValue) {
                    vm.query.page = 1;
                }

                if(!newValue) {
                    vm.query.page = bookmark;
                }

                vm.getTransaction();
            });
        }

        function getTransaction() {
            vm.isTransactionLoaded=true;
            
            //vm.query.from = $filter('date')($scope.from, "yyyy-MM-dd");
            //vm.query.to = $filter('date')($scope.to, "yyyy-MM-dd");

            vm.query.from = $filter('date')($scope.from, "yyyy-MM-dd");
            vm.query.to = $filter('date')($scope.to, "yyyy-MM-dd");


            var transaction_search_query = vm.query;
            sessionStorage.setItem("transaction_search", JSON.stringify(transaction_search_query));

            
            vm.promise = TransactionModel.GetAllTransaction(vm.query);
            vm.promise.then(function(response){
                if(response.statuscode==0){
                    vm.tblData=response.data.items;
                }
                vm.isTransactionLoaded=false;

            });
                
        }

        function removeFilter() {
            vm.filter.show = false;
            vm.query.filter = '';

            if(vm.filter.form.$dirty) {
                vm.filter.form.$setPristine();
            }
        }
        

        function ReceiptController($timeout, $mdDialog, $filter, triSkins, $window, $rootScope, $scope, SettingModel, Clique,TransactionModel) {

            $scope.disabledSubmitButton = false;
            $scope.showCCSIcon = 'zmdi zmdi-account-add';
            $scope.showCCS = false;

            $scope.toggleCCS = function() {
                $scope.showCCS = !$scope.showCCS;
                $scope.showCCSIcon = $scope.showCCS ? 'zmdi zmdi-account' : 'zmdi zmdi-account-add';
            }


            $scope.cancel = function() {
                $mdDialog.hide();
            }
            $scope.validateChip = function($chip, type) {
                if (!$chip) return;
                // check if the current string length is greater than or equal to a character limit.
                var reg = /^[_a-z0-9]+(\.[_a-z0-9]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$/;
                if (!reg.test($chip)) {
                    if (type == "bcc") {
                        $scope.settings.InvoiceContacts.bcc_email.pop();
                    }
                    if (type == "cc") {
                        $scope.settings.InvoiceContacts.cc_email.pop();
                    }
                    if (type == "to") {
                        $scope.settings.InvoiceContacts.to_email.pop();
                    }
                }
                if (type == "to") {
                    if ($scope.settings.InvoiceContacts.to_email.length == 0) {
                        $scope.disabledSubmitButton = true;
                    } else {
                        $scope.disabledSubmitButton = false;
                    }
                }
            }
            $scope.submit = function() {
                $scope.showProgress = true;
                $scope.disabledSubmitButton=true;
                var receiptData={
                    companyInfo:$scope.settings.companyInfo,
                    transaction:$scope.settings.transaction,
                    contact:$scope.settings.InvoiceContacts,
                    receiptType:$scope.settings.receipt_type
                }
                vm.promise = TransactionModel.sendReceipt(receiptData);
                vm.promise.then(function(response) {
                if (response.statuscode == 0) {

                    Clique.showToast(response.statusmessage, 'bottom right', 'success');
                } else {

                    Clique.showToast(response.statusmessage, 'bottom right', 'error');
                }
                    $scope.showProgress = false;
                    $mdDialog.hide();
          
                });
            }

            ////////////////

        }

    }
})(); 